// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IntegrationTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Merchant Fees", Description="\t\t As a MobilePay accountant\r\n\t\t I want to have an app which will calculate merch" +
        "ant fees\r\n\t\t So that we would avoid manual calculation", SourceFile="TransactionFee.feature", SourceLine=0)]
    public partial class MerchantFeesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TransactionFee.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Merchant Fees", "\t\t As a MobilePay accountant\r\n\t\t I want to have an app which will calculate merch" +
                    "ant fees\r\n\t\t So that we would avoid manual calculation", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Standard transaction percentage fee", new string[] {
                "MOBILEPAY-2"}, SourceLine=6)]
        public virtual void StandardTransactionPercentageFee()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Standard transaction percentage fee", null, new string[] {
                        "MOBILEPAY-2"});
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
testRunner.Given("TransactionPercentageFee is configured to be \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
testRunner.And("InvoiceFixedFee is configured to be \'disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
testRunner.And("\'120\' DKK transaction is made to \'CIRCLE_K\' on \'2018-09-02\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
testRunner.And("\'200\' DKK transaction is made to \'TELIA\' on \'2018-09-04\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
testRunner.And("\'300\' DKK transaction is made to \'CIRCLE_K\' on \'2018-10-22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
testRunner.And("\'150\' DKK transaction is made to \'CIRCLE_K\' on \'2018-10-29\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
testRunner.When("fees calculation app is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
testRunner.Then("the output is equal to \'mobilepay-2.txt\' file content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Discount for TELIA", new string[] {
                "MOBILEPAY-3"}, SourceLine=17)]
        public virtual void DiscountForTELIA()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Discount for TELIA", null, new string[] {
                        "MOBILEPAY-3"});
#line 18
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 19
testRunner.Given("TransactionPercentageFee is configured to be \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
testRunner.And("InvoiceFixedFee is configured to be \'disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
testRunner.And("\'TELIA\' has TransactionPercentageFee discount of \'10\' percent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
testRunner.And("\'120\' DKK transaction is made to \'TELIA\' on \'2018-09-02\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
testRunner.And("\'200\' DKK transaction is made to \'TELIA\' on \'2018-09-04\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
testRunner.And("\'300\' DKK transaction is made to \'TELIA\' on \'2018-10-22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
testRunner.And("\'150\' DKK transaction is made to \'TELIA\' on \'2018-10-29\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
testRunner.When("fees calculation app is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
testRunner.Then("the output is equal to \'mobilepay-3.txt\' file content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Discount for CIRCLE_K", new string[] {
                "MOBILEPAY-4"}, SourceLine=29)]
        public virtual void DiscountForCIRCLE_K()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Discount for CIRCLE_K", null, new string[] {
                        "MOBILEPAY-4"});
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 31
testRunner.Given("TransactionPercentageFee is configured to be \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
testRunner.And("InvoiceFixedFee is configured to be \'disabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
testRunner.And("\'CIRCLE_K\' has TransactionPercentageFee discount of \'20\' percent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
testRunner.And("\'120\' DKK transaction is made to \'CIRCLE_K\' on \'2018-09-02\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
testRunner.And("\'200\' DKK transaction is made to \'CIRCLE_K\' on \'2018-09-04\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
testRunner.And("\'300\' DKK transaction is made to \'CIRCLE_K\' on \'2018-10-22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
testRunner.And("\'150\' DKK transaction is made to \'CIRCLE_K\' on \'2018-10-29\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
testRunner.When("fees calculation app is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
testRunner.Then("the output is equal to \'mobilepay-4.txt\' file content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("InvoiceFixedFee for the first transaction of the month", new string[] {
                "MOBILEPAY-5"}, SourceLine=41)]
        public virtual void InvoiceFixedFeeForTheFirstTransactionOfTheMonth()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("InvoiceFixedFee for the first transaction of the month", null, new string[] {
                        "MOBILEPAY-5"});
#line 42
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 43
testRunner.Given("TransactionPercentageFee is configured to be \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
testRunner.And("InvoiceFixedFee is configured to be \'enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 45
testRunner.And("\'120\' DKK transaction is made to \'7-ELEVEN\' on \'2018-09-02\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
testRunner.And("\'200\' DKK transaction is made to \'NETTO\' on \'2018-09-04\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
testRunner.And("\'300\' DKK transaction is made to \'7-ELEVEN\' on \'2018-10-22\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
testRunner.And("\'150\' DKK transaction is made to \'7-ELEVEN\' on \'2018-10-29\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
testRunner.When("fees calculation app is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
testRunner.Then("the output is equal to \'mobilepay-5.txt\' file content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
